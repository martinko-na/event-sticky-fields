@isTest
public class esf_TestFactoryDefaults{

  // To specify defaults for objects, use the naming convention [ObjectName]Defaults.
  // For custom objects, omit the __c from the Object Name

  public class UserDefaults implements esf_TestFactory.FieldDefaults {
    public Map<Schema.SObjectField, Object> getFieldDefaults() {
      String lastName = 'Tester';
      Integer uniqueInteger = System.now().millisecond();
      return new Map<Schema.SObjectField, Object> {
        User.FirstName         => 'Inigo Montoya',
        User.LastName          => lastName,
        User.Alias             => EncodingUtil.convertToHex(Crypto.generateDigest('SHA1', Blob.valueOf(lastName + uniqueInteger))).substring(0,8),
        User.Email             => lastName + '.' + uniqueInteger + '.' + UserInfo.getOrganizationId() + '@example.com',
        User.Username          => lastName + '.' + uniqueInteger + '@example.com.' + UserInfo.getOrganizationId(),
        User.ProfileId         => [SELECT Id FROM Profile WHERE Name  = 'System Administrator' LIMIT 1].Id,
        // User.UserRoleId     => [SELECT Id FROM UserRole WHERE Name = 'CEO' LIMIT 1].Id,
        User.TimeZoneSidKey    => 'America/Chicago',
        User.LanguageLocaleKey => 'en_US',
        User.EmailEncodingKey  => 'UTF-8',
        User.LocaleSidKey      => 'en_US'
      };
    }
  }

  public class AccountDefaults implements esf_TestFactory.FieldDefaults {
    public Map<Schema.SObjectField, Object> getFieldDefaults() {
      return new Map<Schema.SObjectField, Object> {
        Account.Name => 'Test Account'
      };
    }
  }
}